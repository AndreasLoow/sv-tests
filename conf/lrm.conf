# vim: set noet tabstop=8
#
# input database for the report generator
# syntax:
# <TAG NAME><tab><TAG DESCRIPTION>
#
sanity	Various sanity checks
5	Lexical conventions
5.1	General
5.2	Lexical tokens
5.3	White space
5.4	Comments
5.5	Operators
5.6	Identifiers, keywords, and system names
5.7	Numbers
5.8	Time literals
5.9	String literals
5.10	Structure literals
5.11	Array literals
5.12	Attributes
5.13	Built-in methods
6	Data types
6.1	General
6.2	Data types and data objects
6.3	Value set
6.4	Singular and aggregate types
6.5	Nets and variables
6.6	Net types
6.7	Net declarations
6.8	Variable declarations
6.9	Vector declarations
6.10	Implicit declarations
6.11	Integer data types
6.12	Real, shortreal, and realtime data types
6.13	Void data type
6.14	Chandle data type
6.15	Class
6.16	String data type
6.17	Event data type
6.18	User-defined types
6.19	Enumerations
6.20	Constants
6.21	Scope and lifetime
6.22	Type compatibility
6.23	Type operator
6.24	Casting
6.25	Parameterized data types
7	Aggregate data types
7.1	General
7.2	Structures
7.3	Unions
7.4	Packed and unpacked arrays
7.5	Dynamic arrays
7.6	Array assignments
7.7	Arrays as arguments to subroutines
7.8	Associative arrays
7.9	Associative array methods
7.10	Queues
7.11	Array querying functions
7.12	Array manipulation methods
8	Classes
8.1	General
8.2	Overview
8.3	Syntax
8.4	Objects (class instance)
8.5	Object properties and object parameter data
8.6	Object methods
8.7	Constructors
8.8	Typed constructor calls
8.9	Static class properties
8.10	Static methods
8.11	This
8.12	Assignment, renaming, and copying
8.13	Inheritance and subclasses
8.14	Overridden members
8.15	Super
8.16	Casting
8.17	Chaining constructors
8.18	Data hiding and encapsulation
8.19	Constant class properties
8.20	Virtual methods
8.21	Abstract classes and pure virtual methods
8.22	Polymorphism: dynamic method lookup
8.23	Class scope resolution operator
8.24	Out-of-block declarations
8.25	Parameterized classes
8.26	Interface classes
8.27	Typedef class
8.28	Classes and structures
8.29	Memory management
9	Processes
9.1	General
9.2	Structured procedures
9.3	Block statements
9.4	Procedural timing controls
9.5	Process execution threads
9.6	Process control
9.7	Fine-grain process control
10	Assignment statements
10.1	General
10.2	Overview
10.3	Continuous assignments
10.4	Procedural assignments
10.5	Variable declaration assignment (variable initialization)
10.6	Procedural continuous assignments
10.7	Assignment extension and truncation
10.8	Assignment-like contexts
10.9	Assignment patterns
10.10	Unpacked array concatenation
10.11	Net aliasing
11	Operators and expressions
11.1	General
11.2	Overview
11.3	Operators
11.4	Operator descriptions
11.5	Operands
11.6	Expression bit lengths
11.7	Signed expressions
11.8	Expression evaluation rules
11.9	Tagged union expressions and member access
11.10	String literal expressions
11.11	Minimum, typical, and maximum delay expressions
11.12	Let construct
12	Procedural programming statements
12.1	General
12.2	Overview
12.3	Syntax
12.4	Conditional ifâ€“else statement
12.5	Case statement
12.6	Pattern matching conditional statements
12.7	Loop statements
12.8	Jump statements
13	Tasks and functions (subroutines)
13.1	General
13.2	Overview
13.3	Tasks
13.4	Functions
13.5	Subroutine calls and argument passing
13.6	Import and export functions
13.7	Task and function names
13.8	Parameterized tasks and functions
14	Clocking blocks
14.1	General
14.2	Overview
14.3	Clocking block declaration
14.4	Input and output skews
14.5	Hierarchical expressions
14.6	Signals in multiple clocking blocks
14.7	Clocking block scope and lifetime
14.8	Multiple clocking blocks example
14.9	Interfaces and clocking blocks
14.10	Clocking block events
14.11	Cycle delay
14.12	Default clocking
14.13	Input sampling
14.14	Global clocking
14.15	Synchronous events
14.16	Synchronous drives
