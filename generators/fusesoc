#!/usr/bin/env python3

import os
import sys
import yaml
import subprocess

templ = """/*
:name: {0}
:description: {1}
:files: {2}
:incdirs: {3}
:top_module: {4}
:tags: {5}
:timeout: {6}
*/
"""

try:
    third_party_dir = os.environ['THIRD_PARTY_DIR']
    tests_dir = os.environ['TESTS_DIR']
    conf_dir = os.environ['CONF_DIR']
except KeyError:
    print("Export the THIRD_PARTY_DIR, TESTS_DIR and CONF_DIR variables first")
    sys.exit(1)

try:
    tests_subdir = sys.argv[1]
except IndexError:
    print("Usage: ./generator <subdir>")
    sys.exit(1)

fusesoc_conf_files = os.listdir(
    os.path.abspath(os.path.join(conf_dir, "fusesoc-configs")))

for fusesoc_conf_file in fusesoc_conf_files:
    fusesoc_conf_file = os.path.abspath(
        os.path.join(conf_dir, "fusesoc-configs", fusesoc_conf_file))

    if not os.path.isfile(fusesoc_conf_file):
        continue

    with open(fusesoc_conf_file, 'r') as stream:
        try:
            yml_conf = yaml.safe_load(stream)
        except yaml.YAMLError as err:
            print(err)
            sys.exit(1)

    try:
        yml_conf["name"]
        yml_conf["description"]
        yml_conf["top_module"]
        yml_conf["tags"]
        yml_conf["path"]
        yml_conf["command"]
        yml_conf["conf_file"]
        yml_conf["test_file"]
        yml_conf["timeout"]
    except KeyError as err:
        print("No key", err, "in file", fusesoc_conf_file)
        continue

    sources = ''
    incdirs = ''
    incs = []
    command_list = list(yml_conf["command"].split(" "))

    subprocess.call(
        command_list, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    ibex_conf_path = os.path.abspath(yml_conf["conf_file"])

    with open(os.path.abspath(yml_conf["conf_file"]), "r") as f:
        for line in f:
            line = line.strip()
            line = line.rstrip(" \\")
            if line.endswith('.sv'):
                incs.append(
                    os.path.dirname(os.path.join(ibex_conf_path, line)))
                sources += os.path.join(ibex_conf_path, line) + ' '

    incs = list(dict.fromkeys(incs))
    for line in incs:
        incdirs += line + ' '

    test_dir = os.path.join(tests_dir, 'generated', tests_subdir)

    if not os.path.isdir(test_dir):
        os.makedirs(test_dir, exist_ok=True)

    test_file = os.path.join(test_dir, yml_conf["test_file"])

    with open(test_file, "w") as f:
        f.write(
            templ.format(
                yml_conf["name"], yml_conf["description"], sources, incdirs,
                yml_conf["top_module"], yml_conf["tags"], yml_conf["timeout"]))
